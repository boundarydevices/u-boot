/*
 * Copyright (C) 2013 Boundary Devices
 *
 * SPDX-License-Identifier:	GPL-2.0+
 */
/*
 * Micron MT41K512M16HA-107 IT:A (DDR3-1866)
 * RANK 0, BUS_WIDTH 32
 * 16 row + 3 bank + 10 col + 0 rank + 2 width = 31 = 2 GB
 *
 * RANK 0, BUS_WIDTH 64
 * 16 row + 3 bank + 10 col + 0 rank + 3 width = 32 = 4 GB
 *
 * RANK 1, BUS_WIDTH 32
 * 16 row + 3 bank + 10 col + 1 rank + 2 width = 32 = 4 GB
 *
 * RANK 1, BUS_WIDTH 64
 * 16 row + 3 bank + 10 col + 1 rank + 3 width = 33 = 8 GB, too much
 *
 * tRCD 13125 ps
 * tRP 13125 ps
 * tCL 13125 ps
 * 528M DDR clock = .528G = 1893.9ps/clocks
 * 13125ps / 1893.9ps/clocks = 6.93 clocks
 */

#ifndef RANK
#error please define RANK
#endif
#ifndef BUS_WIDTH
#error please define BUS_WIDTH
#endif
#if (RANK == 1) && (BUS_WIDTH == 64)
#error RANK and BUS_WIDTH setting gives too much memory
#endif

#if RANK == 1
#define REG_RANK(reg, rank0, rank1) DATA 4, reg, rank1
#define R_RANK1(reg, rank1) DATA 4, reg, rank1
#else
#define REG_RANK(reg, rank0, rank1) DATA 4, reg, rank0
#define R_RANK1(reg, rank1)
#endif

#if BUS_WIDTH == 64
#define REG_BW(reg, bw32, bw64) DATA 4, reg, bw64
#define R_BW_64(reg, bw64) DATA 4, reg, bw64
#define R_RK_BW(reg, r0_bw32, r0_bw64, r1_bw32, r1_bw64) REG_RANK(reg, r0_bw64, r1_bw64)
#else
#define REG_BW(reg, bw32, bw64) DATA 4, reg, bw32
#define R_BW_64(reg, bw64)
#define R_RK_BW(reg, r0_bw32, r0_bw64, r1_bw32, r1_bw64) REG_RANK(reg, r0_bw32, r1_bw32)
#endif

DATA 4, MX6_MMDC_P0_MDPDC, 0x00020036
DATA 4, MX6_MMDC_P0_MDSCR, 0x00008000
/*
 * tRFC:0x89		(260000/1893.9) = 137.283 = 138(0x8a) clocks
 * tXS:0x8e		(270000/1893.9) = 142.563 = 143(0x8f) clocks
 * tXP:b'011'		(6000/1893.9) = 3.168 = 4 clocks
 * tXPDLL:b'1100'	(24000/1893.9) = 12.672 = 13(0xd) clocks
 * tFAW:b'11010' 	(50000/1893.9) = 26.400 = 27(0x1b) clocks
 * tCL:b'0100'		(13125/1893.9) = 6.930 = 7 clocks
 */
DATA 4, MX6_MMDC_P0_MDCFG0, 0x898E79a4
/*
 * tRCD:b'110'		(13125/1893.9) = 6.930 = 7 clocks
 * tRP:b'110'		(13125/1893.9) = 6.930 = 7 clocks
 * tRC:b'11010'		(50625/1893.9) = 26.731 = 27(0x1b) clocks
 * tRAS:b'10011'	(37500/1893.9) = 19.800 = 20(0x14) clocks
 * tRPA:b'1'		(tRP[+1]) = 8 clocks
 * b'000'
 * tWR:b'111'		(15000/1893.9) = 7.920 = 8 clocks
 * tMRD:b'1011'		(max 4,12) = 12(0xc) clocks
 * b'00'
 * tCWL:b'100'		(tCL-1) = 6 clocks
 */
DATA 4, MX6_MMDC_P0_MDCFG1, 0xDB538F64
/*
 * b'0000000'
 * tDLLK:0x1ff(9 bits), 512(0x200) clocks (Jedec for DDR3)
 * b'0000000'
 * tRTP:b'011'		MAX(4, (7500/1893.9)) = 3.960 = 4 clocks
 * tWTR:same bank b'011' MAX(4, (7500/1893.9)) = 3.960 = 4 clocks
 * tRRD:b'101'		MAX(4, (10000/1893.9)) =  5.280 = 6 clocks
 */
DATA 4, MX6_MMDC_P0_MDCFG2, 0x01FF00DD
/*
 * RTW_SAME: 2 cycles,
 * WTR_DIFF: 3 cycles,
 * WTW_DIFF: 3 cycles,
 * RTW_DIFF: 2 cycles,
 * RTR_DIFF: 2 cycles
 */
DATA 4, MX6_MMDC_P0_MDRWD, 0x0f9f26d2
/*
 * tXPR:0x8e		(270000/1893.9) = 142.563 = 143(0x8f) cycles
 * SDE_to_RST:0x10: 14 cycles, (Jedec)
 * RST_to_CKE:0x23: 33 cycles	(Jedec)
 */
DATA 4, MX6_MMDC_P0_MDOR, 0x008E1023
DATA 4, MX6_MMDC_P0_MDOTC, 0x09444040
DATA 4, MX6_MMDC_P0_MDPDC, 0x00025576
/*
 * RANK 0/1, BUS_WIDTH 32: end of CS0 US 0x90000000-1
 * RANK 0, BUS_WIDTH 64: end of CS0 US 0xffffffff
 */
REG_BW(MX6_MMDC_P0_MDASP, 0x00000047, 0x0000007f)
/*
 * RANK 0: BUS_WIDTH 32: 16 rows, 1 CS, 0x85190000
 * RANK 0: BUS_WIDTH 64: 16 rows, 1 CS, 0x851a0000
 * RANK 1: BUS_WIDTH 32: 16 rows, 2 CS, 0xc5190000
 * RANK 1: BUS_WIDTH 64: 16 rows, 2 CS, 0xc51a0000
 */
R_RK_BW(MX6_MMDC_P0_MDCTL, 0x85190000, 0x851a0000, 0xc5190000, 0xc51a0000)
DATA 4, MX6_MMDC_P0_MDSCR, 0x04088032	/* MR2, tCWL=6, RZQ/2 */
R_RANK1(MX6_MMDC_P0_MDSCR, 0x0408803a)
DATA 4, MX6_MMDC_P0_MDSCR, 0x00008033	/* MR3 */
R_RANK1(MX6_MMDC_P0_MDSCR, 0x0000803b)
DATA 4, MX6_MMDC_P0_MDSCR, 0x00428031	/* MR1 Rtt=RZQ/2 OD=RZQ/7*/
R_RANK1(MX6_MMDC_P0_MDSCR, 0x00428039)
/* A12 - 1 dll on(fast exit), CAS 7 */
DATA 4, MX6_MMDC_P0_MDSCR, 0x19308030	/* MR0 FastExit, tWR=8, Dll reset, tCL=7  */
R_RANK1(MX6_MMDC_P0_MDSCR, 0x19308038)
DATA 4, MX6_MMDC_P0_MDSCR, 0x04008040	/* ZQ calibration */
R_RANK1(MX6_MMDC_P0_MDSCR, 0x04008048)
/* force a calibration */
DATA 4, MX6_MMDC_P0_MPZQHWCTRL, 0xa1390003
R_BW_64(MX6_MMDC_P1_MPZQHWCTRL, 0xa1390003)
/*
 * 8 refreshes at a time, at 64 Khz
 */
DATA 4, MX6_MMDC_P0_MDREF, 0x00003800
DATA 4, MX6_MMDC_P0_MPODTCTRL, 0x00022227
R_BW_64(MX6_MMDC_P1_MPODTCTRL, 0x00022227)

DATA 4, MX6_MMDC_P0_MPDGCTRL0, MX6_MMDC_P0_MPDGCTRL0_VAL
DATA 4, MX6_MMDC_P0_MPDGCTRL1, MX6_MMDC_P0_MPDGCTRL1_VAL
R_BW_64(MX6_MMDC_P1_MPDGCTRL0, MX6_MMDC_P1_MPDGCTRL0_VAL)
R_BW_64(MX6_MMDC_P1_MPDGCTRL1, MX6_MMDC_P1_MPDGCTRL1_VAL)
DATA 4, MX6_MMDC_P0_MPRDDLCTL, MX6_MMDC_P0_MPRDDLCTL_VAL
R_BW_64(MX6_MMDC_P1_MPRDDLCTL, MX6_MMDC_P1_MPRDDLCTL_VAL)
DATA 4, MX6_MMDC_P0_MPWRDLCTL, MX6_MMDC_P0_MPWRDLCTL_VAL
R_BW_64(MX6_MMDC_P1_MPWRDLCTL, MX6_MMDC_P1_MPWRDLCTL_VAL)
DATA 4, MX6_MMDC_P0_MPWLDECTRL0, MX6_MMDC_P0_MPWLDECTRL0_VAL
DATA 4, MX6_MMDC_P0_MPWLDECTRL1, MX6_MMDC_P0_MPWLDECTRL1_VAL
R_BW_64(MX6_MMDC_P1_MPWLDECTRL0, MX6_MMDC_P1_MPWLDECTRL0_VAL)
R_BW_64(MX6_MMDC_P1_MPWLDECTRL1, MX6_MMDC_P1_MPWLDECTRL1_VAL)

DATA 4, MX6_MMDC_P0_MPMUR0, 0x00000800
R_BW_64(MX6_MMDC_P1_MPMUR0, 0x00000800)
DATA 4, MX6_MMDC_P0_MDSCR, 0x00000000
DATA 4, MX6_MMDC_P0_MAPSR, 0x00011006
