/*
 * Copyright (C) 2013 Boundary Devices
 *
 * SPDX-License-Identifier:	GPL-2.0+
 */
/*
 * Hynix H5TC4G63CFR-PBA(rank 0)
 * RANK 0, BUS_WIDTH 16
 * 15 row + 3 bank + 10 col + 0 rank + 1 width = 29 = 512 MB

 * RANK 0, BUS_WIDTH 32
 * 15 row + 3 bank + 10 col + 0 rank + 2 width = 30 = 1 GB
 *
 * RANK 0, BUS_WIDTH 64
 * 15 row + 3 bank + 10 col + 0 rank + 3 width = 31 = 2 GB
 *
 * Hynix H5TC8G63AMR-PBA(rank 1) (DDR3-1600 11-11-11)
 * Micron MT41K512M16TNA-125:E (DDR3L-1600)
 * Hynix is the slower part of the 2.
 * RANK 1, BUS_WIDTH 32
 * 15 row + 3 bank + 10 col + 1 rank + 2 width = 31 = 2 GB
 *
 * RANK 1, BUS_WIDTH 64
 * 15 row + 3 bank + 10 col + 1 rank + 3 width = 32 = 4 GB
 *
 * tRCD 13125 ps
 * tRP 13125 ps
 * tCL 13125 ps
 * 396M DDR clock = .396G = 2525.2ps/clocks
 * 13125ps / 2525ps/clocks = 5.198 clocks
 */

#ifndef RANK
#error please define RANK
#endif
#ifndef BUS_WIDTH
#error please define BUS_WIDTH
#endif

#if RANK == 1
#define REG_RANK(reg, rank0, rank1) DATA 4, reg, rank1
#define R_RANK1(reg, rank1) DATA 4, reg, rank1
#else
#define REG_RANK(reg, rank0, rank1) DATA 4, reg, rank0
#define R_RANK1(reg, rank1)
#endif

#if BUS_WIDTH == 64
#define REG_BW(reg, bw16, bw32, bw64) DATA 4, reg, bw64
#define R_BW_32(reg, bw32) DATA 4, reg, bw32
#define R_BW_64(reg, bw64) DATA 4, reg, bw64
#define R_RK_BW(reg, r0_bw16, r0_bw32, r0_bw64, r1_bw16, r1_bw32, r1_bw64) REG_RANK(reg, r0_bw64, r1_bw64)
#elif BUS_WIDTH == 32
#define REG_BW(reg, bw16, bw32, bw64) DATA 4, reg, bw32
#define R_BW_32(reg, bw32) DATA 4, reg, bw32
#define R_BW_64(reg, bw64)
#define R_RK_BW(reg, r0_bw16, r0_bw32, r0_bw64, r1_bw16, r1_bw32, r1_bw64) REG_RANK(reg, r0_bw32, r1_bw32)
#elif BUS_WIDTH == 16
#define REG_BW(reg, bw16, bw32, bw64) DATA 4, reg, bw16
#define R_BW_32(reg, bw32)
#define R_BW_64(reg, bw64)
#define R_RK_BW(reg, r0_bw16, r0_bw32, r0_bw64, r1_bw16, r1_bw32, r1_bw64) REG_RANK(reg, r0_bw16, r1_bw16)
#endif

DATA 4, MX6_MMDC_P0_MDPDC, 0x0002002d
DATA 4, MX6_MMDC_P0_MDSCR, 0x00008000

#ifdef CONFIG_MX6ULL
/* MMDC_MPWRDQBY0DL */
DATA 4 0x021B082C 0xf3333333
/* MMDC_MPWRDQBY1DL */
DATA 4 0x021B0830 0xf3333333
/* MMDC_MPDCCCR */
DATA 4 0x021B08C0 0x00944009

/* MMDC_MPPDCMPR2 */
DATA 4 0x021B0890 0x00400000
#endif

/*
 * tRFC:0x66		(260000/2525) = 102.97 = 103(0x67) clocks
 * tXS:0x6a		(270000/2525) = 106.93 = 107(0x6b) clocks
 * tXP:b'010'		(6000/2525) = 2.376 = 3 clocks
 * tXPDLL:b'1001'	(24000/2525) = 9.505 = 10(0x0a) clocks
 * tFAW:b'10100'	(27clocks @1066 speed) = 50657ps, (50657/2525) = 20.062 = 21(0x15) clocks
 * tCL:b'0011'		(13125/2525) = 5.198 = 6 clocks
 */
DATA 4, MX6_MMDC_P0_MDCFG0, 0x666a5343
/*
 * tRCD:b'101'		(13125/2525) = 5.198 = 6 clocks
 * tRP:b'101'		(13125/2525) = 5.198 = 6 clocks
 * tRC:b'10100'		(50625/2525) = 20.049 = 21(0x15) clocks
 * tRAS:b'01110'	(37500/2525) = 14.851 = 15(0x0f) clocks
 * tRPA:b'1'		(tRP[+1]) = 7 clocks
 * b'000'
 * tWR:b'101'		(15000/2525) = 5.940 = 6 clocks
 * tMRD:b'1011'		(max tMRD 4, tMOD 12) = 12(0xc) clocks
 * b'00'
 * tCWL:b'011'		(tCL-1) = 5 clocks
 */
DATA 4, MX6_MMDC_P0_MDCFG1, 0xb68e8b63
/*
 * b'0000000'
 * tDLLK:0x1ff(9 bits), 512(0x200) clocks (Jedec for DDR3)
 * b'0000000'
 * tRTP:b'011'		MAX(4, (7500/2525)) = 2.970 = 4 clocks
 * tWTR:same bank b'011' MAX(4, (7500/2525)) = 2.970 = 4 clocks
 * tRRD:b'100'		MAX(4, (11258/2525)) =  4.458 = 5 clocks
 */
DATA 4, MX6_MMDC_P0_MDCFG2, 0x01ff00dc
/*
 * RTW_SAME: 2 cycles,
 * WTR_DIFF: 3 cycles,
 * WTW_DIFF: 3 cycles,
 * RTW_DIFF: 2 cycles,
 * RTR_DIFF: 2 cycles
 */
DATA 4, MX6_MMDC_P0_MDRWD, 0x0f9f26d2
/*
 * tXPR:0x6a		(270000/2525) = 106.93 = 107(0x6b) cycles
 * SDE_to_RST:0x10: 14 cycles, (Jedec)
 * RST_to_CKE:0x23: 33 cycles	(Jedec)
 */
DATA 4, MX6_MMDC_P0_MDOR, 0x006a1023
#ifdef CONFIG_MX6ULL
DATA 4, MX6_MMDC_P0_MDOTC, 0x1b333030
#else
DATA 4, MX6_MMDC_P0_MDOTC, 0x00333030
#endif
DATA 4, MX6_MMDC_P0_MDPDC, 0x0002556d
/*
 * RANK 0/1, BUS_WIDTH 16: end of CS0 US 0x30000000-1(base 0x10000000) (0xa0000000-1)(base 0x80000000)
 * RANK 0/1, BUS_WIDTH 32: end of CS0 US 0x50000000-1(base 0x10000000) (0xc0000000-1)(base 0x80000000)
 * RANK 0/1, BUS_WIDTH 64: end of CS0 US 0x90000000-1(base 0x10000000) (0x100000000-1)(base 0x80000000)
 */
#ifdef CONFIG_MX6ULL
REG_BW(MX6_MMDC_P0_MDASP, 0x4f, 0x5f, 0x7f)
#else
REG_BW(MX6_MMDC_P0_MDASP, 0x17, 0x27, 0x47)
#endif
/*
 * RANK 0: BUS_WIDTH 16: 15 rows, 1 CS, 0x84180000
 * RANK 0: BUS_WIDTH 32: 15 rows, 1 CS, 0x84190000
 * RANK 0: BUS_WIDTH 64: 15 rows, 1 CS, 0x841a0000
 * RANK 1: BUS_WIDTH 16: 15 rows, 2 CS, 0xc4180000
 * RANK 1: BUS_WIDTH 32: 15 rows, 2 CS, 0xc4190000
 * RANK 1: BUS_WIDTH 64: 15 rows, 2 CS, 0xc41a0000
 */
R_RK_BW(MX6_MMDC_P0_MDCTL, 0x84180000, 0x84190000, 0x841a0000, 0xc4180000, 0xc4190000, 0xc41a0000)
DATA 4, MX6_MMDC_P0_MDSCR, 0x04008032	/* MR2, tCWL=5, RZQ/2 */
R_RANK1(MX6_MMDC_P0_MDSCR, 0x0400803a)
DATA 4, MX6_MMDC_P0_MDSCR, 0x00008033	/* MR3 */
R_RANK1(MX6_MMDC_P0_MDSCR, 0x0000803b)
DATA 4, MX6_MMDC_P0_MDSCR, 0x00048031	/* MR1 Rtt=RZQ/4 OD=RZQ/6*/
R_RANK1(MX6_MMDC_P0_MDSCR, 0x00048039)
/* A12 - 1 dll on(fast exit), tCL 6 */
DATA 4, MX6_MMDC_P0_MDSCR, 0x15208030	/* MR0 FastExit, tWR=6(b'010'), Dll reset, tCL=6*/
R_RANK1(MX6_MMDC_P0_MDSCR, 0x15208038)
DATA 4, MX6_MMDC_P0_MDSCR, 0x04008040	/* ZQ calibration */
R_RANK1(MX6_MMDC_P0_MDSCR, 0x04008048)
/* force a calibration */
DATA 4, MX6_MMDC_P0_MPZQHWCTRL, 0xa1390003
R_BW_64(MX6_MMDC_P1_MPZQHWCTRL, 0xa1390003)
/*
 * 8 refreshes at a time, at 32 Khz
 */
DATA 4, MX6_MMDC_P0_MDREF, 0x00007800
#ifdef CONFIG_MX6ULL
DATA 4, MX6_MMDC_P0_MPODTCTRL, 0x00000227
#else
DATA 4, MX6_MMDC_P0_MPODTCTRL, 0x00022227
#endif
R_BW_64(MX6_MMDC_P1_MPODTCTRL, 0x00022227)

DATA 4, MX6_MMDC_P0_MPDGCTRL0, MX6_MMDC_P0_MPDGCTRL0_VAL
R_BW_32(MX6_MMDC_P0_MPDGCTRL1, MX6_MMDC_P0_MPDGCTRL1_VAL)
R_BW_64(MX6_MMDC_P1_MPDGCTRL0, MX6_MMDC_P1_MPDGCTRL0_VAL)
R_BW_64(MX6_MMDC_P1_MPDGCTRL1, MX6_MMDC_P1_MPDGCTRL1_VAL)
DATA 4, MX6_MMDC_P0_MPRDDLCTL, MX6_MMDC_P0_MPRDDLCTL_VAL
R_BW_64(MX6_MMDC_P1_MPRDDLCTL, MX6_MMDC_P1_MPRDDLCTL_VAL)
DATA 4, MX6_MMDC_P0_MPWRDLCTL, MX6_MMDC_P0_MPWRDLCTL_VAL
R_BW_64(MX6_MMDC_P1_MPWRDLCTL, MX6_MMDC_P1_MPWRDLCTL_VAL)
DATA 4, MX6_MMDC_P0_MPWLDECTRL0, MX6_MMDC_P0_MPWLDECTRL0_VAL
R_BW_32(MX6_MMDC_P0_MPWLDECTRL1, MX6_MMDC_P0_MPWLDECTRL1_VAL)
R_BW_64(MX6_MMDC_P1_MPWLDECTRL0, MX6_MMDC_P1_MPWLDECTRL0_VAL)
R_BW_64(MX6_MMDC_P1_MPWLDECTRL1, MX6_MMDC_P1_MPWLDECTRL1_VAL)

DATA 4, MX6_MMDC_P0_MPMUR0, 0x00000800
R_BW_64(MX6_MMDC_P1_MPMUR0, 0x00000800)
DATA 4, MX6_MMDC_P0_MDSCR, 0x00000000
DATA 4, MX6_MMDC_P0_MAPSR, 0x00011006
