setenv bootargs ''

kernelimage=vmlinuz
bootcommand=bootz
img_prefix=/
a_base=0x10000000

#grab 1st 2/3 characters of string
if itest.s "xmediatek" == "x${soc}" ; then
	cpu2="MT"
	cpu3="MTK"
else
	if itest.s x == "x${imx_cpu}" ; then
		cpu2="AM"
		cpu3="AML"
	else
		setexpr cpu2 sub "^(..?).*" "\\1" "${imx_cpu}"
		setexpr cpu3 sub "^(..?.?).*" "\\1" "${imx_cpu}"
	fi
fi
if itest.s x51 == "x${cpu2}" ; then
	a_base=0x90000000
elif itest.s x53 == "x${cpu2}"; then
	a_base=0x70000000
elif itest.s x6SX == "x${cpu3}" || itest.s x6U == "x${cpu2}" || itest.s x7D == "x${cpu2}"; then
	a_base=0x80000000
elif itest.s x8M == "x${cpu2}"; then
	a_base=0x40000000
	kernelimage=Image
	bootcommand=booti
	img_prefix=${prefix}
elif itest.s x8U == "x${cpu2}"; then
	a_base=0x80000000
	kernelimage=Image
	bootcommand=booti
	img_prefix=${prefix}
elif itest.s xAM == "x${cpu2}"; then
	a_base=0x08000000
	kernelimage=Image
	bootcommand=booti
	img_prefix=${prefix}
elif itest.s xMT == "x${cpu2}"; then
	# mediatek reserves 0x43200000-0x43dfffff
	a_base=0x44000000
	kernelimage=Image
	bootcommand=booti
	img_prefix=${prefix}
fi

setexpr a_script  ${a_base} + 0x00800000
setexpr a_zImage  ${a_base} + 0x00800000
# i.mx8MP uses address 0x43200000 as its optee dtb overlay address
#kernel can be 56M, 42M for i.mx8MP
setexpr a_fdt     ${a_base} + 0x04000000
setexpr a_fdto    ${a_base} + 0x04100000
setexpr a_initrd  ${a_base} + 0x04200000
setexpr a_reset_cause_marker ${a_base} + 0x80
setexpr a_reset_cause	     ${a_base} + 0x84

if itest.s "x" == "x${board}" ; then
	echo "!!!! Error: Your u-boot is outdated. Please upgrade.";
	exit;
fi

if itest.s x51 == "x${cpu2}" ; then
	dtb_prefix=imx51;
elif itest.s x53 == "x${cpu2}" ; then
	dtb_prefix=imx53;
elif itest.s x6DL == "x${cpu3}" || itest.s x6SO == "x${cpu3}" ; then
	dtb_prefix=imx6dl;
elif itest.s x6QP == "x${cpu3}" ; then
	dtb_prefix=imx6qp;
elif itest.s x6SX == "x${cpu3}" ; then
	dtb_prefix=imx6sx;
elif itest.s x6UL == "x${cpu3}" ; then
	dtb_prefix=imx6ull;
elif itest.s x7D == "x${cpu2}" ; then
	dtb_prefix=imx7d;
elif itest.s x8MM == "x${cpu3}" ; then
	dtb_prefix=imx8mm;
elif itest.s x8MN == "x${cpu3}" ; then
	dtb_prefix=imx8mn;
elif itest.s x8MP == "x${cpu3}" ; then
	if itest *0x30360800 == 0x00824310 ; then
		dtb_prefix=imx8mp-a0;
	else
		dtb_prefix=imx8mp;
	fi
elif itest.s x8MQ == "x${cpu3}" ; then
	dtb_prefix=imx8mq;
elif itest.s x8ULP == "x${imx_cpu}" ; then
	dtb_prefix=imx8ulp;
elif itest.s xMT == "x${cpu2}" ; then
	dtb_prefix="";
else
	dtb_prefix=imx6q;
fi

if test ! -z "${mcore_enabled}"; then
    if test ! -z "${mcoreboot}"; then
            run mcoreboot;
    fi
    mcore_dtb=1
fi
if test ! -z "${m4enabled}"; then
    if test ! -z "${m4boot}"; then
            run m4boot;
    fi
    mcore_dtb=1
fi

if test -z "${fdt_file}" ; then
    if test -z "$dtb_prefix"; then
	bn=${board}${board_rv}${board_carrier}${board_modifier};
    else
	bn=${dtb_prefix}-${board}${board_rv}${board_carrier}${board_modifier};
    fi
    if test ! -z "${mcore_dtb}" ; then
            if test -e ${devtype} ${devnum}:${distro_bootpart} ${prefix}${bn}-rpmsg.dtb; then
                    fdt_file=${bn}-rpmsg.dtb
            else
                    fdt_file=${bn}-m4.dtb
            fi
    else
            fdt_file=${bn}.dtb
    fi
fi
if test ! -z "${mcore_dtb}" ; then
    setenv bootargs ${bootargs} ${mcore_bootargs}
fi

if itest.s x${distro_bootpart} == x ; then
	distro_bootpart=1
fi

if itest.s "x" != "x${upgradeu_pending}" ; then
	echo upgradeu_pending is ${upgradeu_pending}
	echo "Trying upgrade.scr"
	if load ${devtype} ${devnum}:${distro_bootpart} ${a_script} upgrade.scr ; then
		setenv upgradeu_pending
		savee
		echo "Running upgrade.scr"
		reset=1
		source ${a_script}
	fi
fi

if load ${devtype} ${devnum}:${distro_bootpart} ${a_script} uEnv.txt ; then
    env import -t ${a_script} ${filesize}
fi

if itest.s x${console} != x ; then
	setenv bootargs ${bootargs} console=${console},115200
fi
if itest.s "x" == "x$vmalloc" ; then
	vmalloc=400M
fi
if itest.s x${consoleblank} == x ; then
	consoleblank=0
fi
setenv bootargs ${bootargs} vmalloc=${vmalloc} consoleblank=${consoleblank} rootwait fixrtc cpu=${imx_cpu} board=${board} uboot_release=${uboot_release}

setenv bootargs ${bootargs} systemd.gpt_auto=0

if load ${devtype} ${devnum}:${distro_bootpart} ${a_fdt} ${prefix}${fdt_file} ; then
	fdt addr ${a_fdt}
	echo "Device tree loaded: ${prefix}${fdt_file}";
else
	echo "!!!! Error loading ${prefix}${fdt_file}";
	exit;
fi

fdt resize 8192
for dtbofile in ${dtbos}; do
	load ${devtype} ${devnum}:${distro_bootpart} ${a_fdto} ${prefix}/devicetree/${dtbofile}.dtbo
	fdt apply ${a_fdto}
done

if itest.s "x" != "x${cmd_board}" ; then
	run cmd_board
fi
if itest.s "x" != "x${cmd_custom}" ; then
	run cmd_custom
fi
if itest.s "x" != "x${cmd_hdmi}" ; then
	run cmd_hdmi
	if itest.s x != x${allow_noncea} ; then
		setenv bootargs ${bootargs} mxc_hdmi.only_cea=0;
		echo "non-CEA modes allowed on HDMI, audio may be affected";
	fi
fi
if itest.s "x" != "x${cmd_lcd}" ; then
	run cmd_lcd
fi
if itest.s "x" != "x${cmd_lcd2}" ; then
	run cmd_lcd2
fi
if itest.s "x" != "x${cmd_lvds}" ; then
	run cmd_lvds
fi
if itest.s "x" != "x${cmd_lvds2}" ; then
	run cmd_lvds2
fi
if itest.s "x" != "x${cmd_mipi}" ; then
	run cmd_mipi
fi

setexpr b0 ${distro_bootpart} % 0x0a;
setexpr b1 ${distro_bootpart} / 0x0a;
#this is to show a decimal number when really hex is output
setexpr bpart ${b1} * 0x10
setexpr bpart ${bpart} + ${b0};

if itest.s "x" != "x${root_dev}" ; then
	setenv bootargs "${bootargs} root=${root_dev}${bpart}" ;
elif test "sata" = "${devtype}" ; then
	setenv bootargs "${bootargs} root=/dev/sda${bpart}" ;
elif test "usb" = "${devtype}" ; then
	if itest.s "x1" == "x${devnum}" ; then
		setenv bootargs "${bootargs} root=/dev/sdb${bpart}" ;
	else
		setenv bootargs "${bootargs} root=/dev/sda${bpart}" ;
	fi
else
	setenv bootargs "${bootargs} root=/dev/mmcblk${devnum}p${bpart}"
fi

if itest.s "x" != "x${disable_msi}" ; then
	setenv bootargs ${bootargs} pci=nomsi
fi;

if itest.s "x" != "x${disable_giga}" ; then
	setenv bootargs ${bootargs} fec.disable_giga=1
fi

if itest.s "x" != "x${wlmac}" ; then
	setenv bootargs ${bootargs} wlcore.mac=${wlmac}
fi

if itest.s "x" != "x${bd_addr}" ; then
	setenv bootargs ${bootargs} bd_addr=${bd_addr}
fi

if itest.s "x" != "x${gpumem}" ; then
	setenv bootargs ${bootargs} galcore.contiguousSize=${gpumem}
fi

if itest.s "no" != "${dosplash}" ; then
	if itest.s "x" == "x${loglevel}" ; then
		loglevel=4
	fi
	setenv bootargs ${bootargs} splash plymouth.ignore-serial-consoles
fi

if itest.s "x" != "x${loglevel}" ; then
	setenv bootargs ${bootargs} loglevel=${loglevel}
fi

if itest *${a_reset_cause_marker} == 12345678 ; then
	setexpr.l reset_cause *${a_reset_cause}
	setenv bootargs $bootargs reset_cause=0x${reset_cause}
fi

if itest.s "x" != "x${overlayroot}" ; then
	setenv bootargs ${bootargs} overlayroot=${overlayroot}
fi

if itest.s "x" != "x${cma}" ; then
	setenv bootargs ${bootargs} cma=${cma}
fi
setenv bootargs ${bootargs} snd.slots=,snd-soc-imx-hdmi

if itest.s "x" != "x${show_fdt}" ; then
	fdt print /
fi

if itest.s "x" != "x${show_env}" ; then
	printenv
fi

echo "----------- trying to load /initrd.img";
if load ${devtype} ${devnum}:${distro_bootpart} ${a_initrd} ${img_prefix}initrd.img ; then
	haverd=1;
	setenv initrd_size ${filesize}
else
	haverd=
fi

if itest.s x${haverd} == x ; then
	if load ${devtype} ${devnum}:${distro_bootpart} ${a_zImage} ${img_prefix}${kernelimage} ; then
		setenv bootargs ${bootargs} rw
		${bootcommand} ${a_zImage} - ${a_fdt}
	fi
else
	if load ${devtype} ${devnum}:${distro_bootpart} ${a_zImage} ${img_prefix}${kernelimage} ; then
		${bootcommand} ${a_zImage} ${a_initrd}:${initrd_size} ${a_fdt} ;
	fi
fi
echo "Error loading kernel image"
